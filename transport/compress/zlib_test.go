package compress

import (
	"bytes"
	"io/ioutil"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCompress_ZlibDeflate(t *testing.T) {
	tt := []struct {
		level  Level
		input  string
		output []byte
	}{
		{
			DefaultCompression,
			"The quick brown fox jumps over the lazy dog.",
			[]byte{0x78, 0x9c, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
		},
		{
			BestCompression,
			"The quick brown fox jumps over the lazy dog.",
			[]byte{0x78, 0xda, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
		},
		{
			SpeedCompression,
			"The quick brown fox jumps over the lazy dog.",
			[]byte{0x78, 0xda, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
		},
	}
	wBuf := new(bytes.Buffer)
	for _, tc := range tt {
		wBuf.Reset()
		compressor := NewZlibCompressor(nil, wBuf, tc.level)
		compressor.Write([]byte(tc.input))
		require.Equal(t, tc.output, wBuf.Bytes())
	}
}

func TestCompress_ZlibInflate(t *testing.T) {
	tt := []struct {
		level  Level
		input  []byte
		output string
	}{
		{
			DefaultCompression,
			[]byte{0x78, 0x9c, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
			"The quick brown fox jumps over the lazy dog.",
		},
		{
			BestCompression,
			[]byte{0x78, 0xda, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
			"The quick brown fox jumps over the lazy dog.",
		},
		{
			SpeedCompression,
			[]byte{0x78, 0xda, 0xa, 0xc9, 0x48, 0x55, 0x28, 0x2c, 0xcd, 0x4c, 0xce, 0x56, 0x48, 0x2a, 0xca, 0x2f, 0xcf, 0x53, 0x48, 0xcb, 0xaf, 0x50, 0xc8, 0x2a, 0xcd, 0x2d, 0x28, 0x56, 0xc8, 0x2f, 0x4b, 0x2d, 0x52, 0x28, 0xc9, 0x48, 0x55, 0xc8, 0x49, 0xac, 0xaa, 0x54, 0x48, 0xc9, 0x4f, 0xd7, 0x3, 0x0, 0x0, 0x0, 0xff, 0xff},
			"The quick brown fox jumps over the lazy dog.",
		},
	}
	rBuf := new(bytes.Buffer)
	for _, tc := range tt {
		rBuf.Reset()
		rBuf.Write(tc.input)
		compressor := NewZlibCompressor(rBuf, nil, tc.level)
		b, _ := ioutil.ReadAll(compressor)
		require.Equal(t, tc.output, string(b))
	}
}

func TestCompress_InvalidCompressionLevel(t *testing.T) {
	compressor := NewZlibCompressor(new(bytes.Buffer), new(bytes.Buffer), Level(100))
	_, err := compressor.Write([]byte("Fail"))
	require.NotNil(t, err)
}

func TestCompress_InvalidInflate(t *testing.T) {
	rBuf := new(bytes.Buffer)
	rBuf.Write([]byte("this is a failed case"))
	compressor := NewZlibCompressor(rBuf, nil, DefaultCompression)
	_, err := ioutil.ReadAll(compressor)
	require.NotNil(t, err)
}
